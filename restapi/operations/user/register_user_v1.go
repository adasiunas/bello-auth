// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RegisterUserV1HandlerFunc turns a function with the right signature into a register user v1 handler
type RegisterUserV1HandlerFunc func(RegisterUserV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterUserV1HandlerFunc) Handle(params RegisterUserV1Params) middleware.Responder {
	return fn(params)
}

// RegisterUserV1Handler interface for that can handle valid register user v1 params
type RegisterUserV1Handler interface {
	Handle(RegisterUserV1Params) middleware.Responder
}

// NewRegisterUserV1 creates a new http.Handler for the register user v1 operation
func NewRegisterUserV1(ctx *middleware.Context, handler RegisterUserV1Handler) *RegisterUserV1 {
	return &RegisterUserV1{Context: ctx, Handler: handler}
}

/*RegisterUserV1 swagger:route POST /v1/user User registerUserV1

User registration endpoint

*/
type RegisterUserV1 struct {
	Context *middleware.Context
	Handler RegisterUserV1Handler
}

func (o *RegisterUserV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterUserV1Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
