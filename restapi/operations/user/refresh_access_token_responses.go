// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	apimodel "github.com/adasiunas/bello-auth/apimodel"
)

// RefreshAccessTokenOKCode is the HTTP code returned for type RefreshAccessTokenOK
const RefreshAccessTokenOKCode int = 200

/*RefreshAccessTokenOK User's token was successfully refreshed

swagger:response refreshAccessTokenOK
*/
type RefreshAccessTokenOK struct {

	/*
	  In: Body
	*/
	Payload *apimodel.TokenResponse `json:"body,omitempty"`
}

// NewRefreshAccessTokenOK creates RefreshAccessTokenOK with default headers values
func NewRefreshAccessTokenOK() *RefreshAccessTokenOK {

	return &RefreshAccessTokenOK{}
}

// WithPayload adds the payload to the refresh access token o k response
func (o *RefreshAccessTokenOK) WithPayload(payload *apimodel.TokenResponse) *RefreshAccessTokenOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh access token o k response
func (o *RefreshAccessTokenOK) SetPayload(payload *apimodel.TokenResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshAccessTokenOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshAccessTokenBadRequestCode is the HTTP code returned for type RefreshAccessTokenBadRequest
const RefreshAccessTokenBadRequestCode int = 400

/*RefreshAccessTokenBadRequest Bad request payload

swagger:response refreshAccessTokenBadRequest
*/
type RefreshAccessTokenBadRequest struct {

	/*
	  In: Body
	*/
	Payload *apimodel.ErrorResponse `json:"body,omitempty"`
}

// NewRefreshAccessTokenBadRequest creates RefreshAccessTokenBadRequest with default headers values
func NewRefreshAccessTokenBadRequest() *RefreshAccessTokenBadRequest {

	return &RefreshAccessTokenBadRequest{}
}

// WithPayload adds the payload to the refresh access token bad request response
func (o *RefreshAccessTokenBadRequest) WithPayload(payload *apimodel.ErrorResponse) *RefreshAccessTokenBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh access token bad request response
func (o *RefreshAccessTokenBadRequest) SetPayload(payload *apimodel.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshAccessTokenBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RefreshAccessTokenInternalServerErrorCode is the HTTP code returned for type RefreshAccessTokenInternalServerError
const RefreshAccessTokenInternalServerErrorCode int = 500

/*RefreshAccessTokenInternalServerError Service down

swagger:response refreshAccessTokenInternalServerError
*/
type RefreshAccessTokenInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *apimodel.ErrorResponse `json:"body,omitempty"`
}

// NewRefreshAccessTokenInternalServerError creates RefreshAccessTokenInternalServerError with default headers values
func NewRefreshAccessTokenInternalServerError() *RefreshAccessTokenInternalServerError {

	return &RefreshAccessTokenInternalServerError{}
}

// WithPayload adds the payload to the refresh access token internal server error response
func (o *RefreshAccessTokenInternalServerError) WithPayload(payload *apimodel.ErrorResponse) *RefreshAccessTokenInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the refresh access token internal server error response
func (o *RefreshAccessTokenInternalServerError) SetPayload(payload *apimodel.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RefreshAccessTokenInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
