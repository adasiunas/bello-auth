// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorResponse error response
// swagger:model ErrorResponse
type ErrorResponse struct {

	// message
	// Enum: [InternalServerError Unauthorized NotFound UserAlreadyExists BadRequest]
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this error response
func (m *ErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var errorResponseTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InternalServerError","Unauthorized","NotFound","UserAlreadyExists","BadRequest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorResponseTypeMessagePropEnum = append(errorResponseTypeMessagePropEnum, v)
	}
}

const (

	// ErrorResponseMessageInternalServerError captures enum value "InternalServerError"
	ErrorResponseMessageInternalServerError string = "InternalServerError"

	// ErrorResponseMessageUnauthorized captures enum value "Unauthorized"
	ErrorResponseMessageUnauthorized string = "Unauthorized"

	// ErrorResponseMessageNotFound captures enum value "NotFound"
	ErrorResponseMessageNotFound string = "NotFound"

	// ErrorResponseMessageUserAlreadyExists captures enum value "UserAlreadyExists"
	ErrorResponseMessageUserAlreadyExists string = "UserAlreadyExists"

	// ErrorResponseMessageBadRequest captures enum value "BadRequest"
	ErrorResponseMessageBadRequest string = "BadRequest"
)

// prop value enum
func (m *ErrorResponse) validateMessageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, errorResponseTypeMessagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ErrorResponse) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.Message) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageEnum("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponse) UnmarshalBinary(b []byte) error {
	var res ErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
