// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ServiceStatusHandlerFunc turns a function with the right signature into a service status handler
type ServiceStatusHandlerFunc func(ServiceStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceStatusHandlerFunc) Handle(params ServiceStatusParams) middleware.Responder {
	return fn(params)
}

// ServiceStatusHandler interface for that can handle valid service status params
type ServiceStatusHandler interface {
	Handle(ServiceStatusParams) middleware.Responder
}

// NewServiceStatus creates a new http.Handler for the service status operation
func NewServiceStatus(ctx *middleware.Context, handler ServiceStatusHandler) *ServiceStatus {
	return &ServiceStatus{Context: ctx, Handler: handler}
}

/*ServiceStatus swagger:route GET /status Status serviceStatus

Used for checking service status and code hash

*/
type ServiceStatus struct {
	Context *middleware.Context
	Handler ServiceStatusHandler
}

func (o *ServiceStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewServiceStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
